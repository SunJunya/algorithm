package com.sort;

public class Sort {

	public static void main(String[] args) {
		Sort sort=new Sort();
		int[] a={43,32,23,13,5};
		//sort.InsertionSort(a);
		sort.ShellSort(a);
		for(int i=0;i<a.length;i++){
			System.out.println(a[i]);
		}

	}
	
	public void InsertionSort(int[] a){
		/*
		 * 直接插入排序（Straight insertion sorting）的基本思想：在要排序的一组数组中，假设前面(n-1)[n>=2]
		 * 个数已经排好顺序，现在要把第n个数查到前面的有序数中，使得这个n个数也是排好顺序的。如此反复循环，知道全部排好顺序
		 * 
		 * 时间复杂度O（n^2）
		 * */
		
		int length=a.length;
		int insertnum;
		for(int i=1;i<length;i++)
		{
			insertnum=a[i];
			int j=i-1;
			for(;j>=0;j--){
				if(a[j]>insertnum){
					a[j+1]=a[j];
				}
			}
			a[j+1]=insertnum;
			
			
		}
	}
	
	
	public void ShellSort(int[] a){
		int length=a.length;
		for(;length!=0;){
			length=length/2;
			for(int i=0;i<length;i++){
				for(int j=i+length;j<a.length;j=j+length){
					int k=j-length;
					int temp=a[j];
					for(;k>=0;){
						if(a[k]>temp){
							a[k+length]=a[k];	
							k=k-length;
						}	
						
					}	
					a[k+length]=temp;
				}
			}
		}
	}

}
